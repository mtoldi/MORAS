function Walls.new 0
push constant 2
call Memory.alloc 1
pop pointer 0
push constant 7
pop this 0
push pointer 0
call Walls.createWalls 1
pop temp 0
push pointer 0
return
function Walls.init 0
push argument 0
pop pointer 0
push pointer 0
call Walls.draw 1
pop temp 0
push constant 0
return
function Walls.createWalls 2
push argument 0
pop pointer 0
push this 0
call Array.new 1
pop this 1
push constant 0
push this 1
add
push constant 30
push constant 10
push constant 340
push constant 15
call Wall.new 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push this 1
add
push constant 30
push constant 15
push constant 35
push constant 240
call Wall.new 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push this 1
add
push constant 30
push constant 230
push constant 340
push constant 240
call Wall.new 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push this 1
add
push constant 328
push constant 15
push constant 340
push constant 240
call Wall.new 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push this 1
add
push constant 145
push constant 106
push constant 190
push constant 113
call Wall.new 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push this 1
add
push constant 145
push constant 135
push constant 190
push constant 142
call Wall.new 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 6
push this 1
add
push constant 183
push constant 112
push constant 190
push constant 135
call Wall.new 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Walls.draw 2
push argument 0
pop pointer 0
push constant 0
pop local 1
label WHILE_EXP0
push local 1
push this 0
lt
not
if-goto WHILE_END0
push local 1
push this 1
add
pop pointer 1
push that 0
pop local 0
push local 0
call Wall.draw 1
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Walls.checkOverlapping 2
push argument 0
pop pointer 0
push constant 0
pop local 1
label WHILE_EXP0
push local 1
push this 0
lt
not
if-goto WHILE_END0
push local 1
push this 1
add
pop pointer 1
push that 0
pop local 0
push local 0
push argument 1
push argument 2
push argument 3
push argument 4
call Wall.checkOverlapping 5
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
return
label IF_FALSE0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Walls.dispose 2
push argument 0
pop pointer 0
push constant 0
pop local 1
label WHILE_EXP0
push local 1
push this 0
lt
not
if-goto WHILE_END0
push local 1
push this 1
add
pop pointer 1
push that 0
pop local 0
push local 0
call Wall.dispose 1
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push this 1
call Array.dispose 1
pop temp 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
