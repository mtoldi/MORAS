class Walls {

  field int nWalls;
  field Array walls;

  constructor Walls new() {
    let nWalls = 7;
    do createWalls();
    return this;
  }

  method void init() {
    do draw();
    return;
  }
  method void createWalls() {
    var int i, bx;
    let walls = Array.new(nWalls);
    
    //okvir
    let walls[0] = Wall.new(30, 10, 340, 15);
    let walls[1] = Wall.new(30, 15, 35, 240);
    let walls[2] = Wall.new(30, 230, 340, 240);
    let walls[3] = Wall.new(328, 15, 340, 240);
    //cage
    let walls[4] = Wall.new(145, 106, 190, 113);
    let walls[5] = Wall.new(145, 135, 190, 142);
    let walls[6] = Wall.new(183, 112, 190, 135);

    return;
  }

  method void draw() {
    var Wall w;
    var int i;
    let i = 0;
    while (i < nWalls) {
      let w = walls[i];
      do w.draw();
      let i = i + 1;
    }
    return;
  }

  method boolean checkOverlapping(int x1, int y1, int x2, int y2) {
    var Wall w;
    var int i;
    let i = 0;
    while (i < nWalls) {
      let w = walls[i];
      if (w.checkOverlapping(x1, y1, x2, y2)) {
        return true;
      }
      let i = i + 1;
    }
    return false;
  }

  method void dispose() {
	var Wall w;
	var int i;
    let i = 0;
    while (i < nWalls) {
      let w = walls[i];
      do w.dispose();
      let i = i + 1;
    }
	  do walls.dispose();
    do Memory.deAlloc(this);
    return;
  }
}