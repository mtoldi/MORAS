class Score {

  field int score;


  field int level;


  field Pellets pellets;

  field int getscore;
  field int getlevel;
  

  constructor Score new(Pellets p) {
    let score = 0;
    let pellets = p;
    let level = 1;
    return this;
  }

  method void init() {

    do draw();
    return;
  }

  method void next() {

    var int nextScore;
    if (level = 1){
      let nextScore = pellets.getCapturedCount() * 10;
      if (~(nextScore = score)) {
        let score = nextScore;
        do draw();
      }
      return;
    }
    if (level = 2){
      let nextScore = pellets.getCapturedCount() * 20;
      if (~(nextScore = score)) {
        let score = nextScore;
        do draw();
      }
      return;
    }
    if (level = 3){
      let nextScore = pellets.getCapturedCount() * 30;
      if (~(nextScore = score)) {
        let score = nextScore;
        do draw();
      }
      return;
    }
    return;
  }
  

  method void draw() {
    do Output.moveCursor(2, 52); // row, col
    do Output.printInt(score);
	  do Output.moveCursor(7, 52); // row, col
    do Output.printInt(level);
    return;
  }
  
  method int getscore() {
    return score;
  }

  method int getlevel() {
    return level;
  }

  method int setlevel2(){
    let level = 2;
    return level;
  }

  method int setlevel3(){
    let level = 3;
    return level;
  }
  
  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }
}